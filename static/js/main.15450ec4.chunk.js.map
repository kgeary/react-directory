{"version":3,"sources":["components/EmployeeImage/index.js","components/Employee/index.js","utils/format.js","components/TableHead/index.js","components/Table/index.js","components/Search/index.js","components/ColFilter/index.js","utils/seed.js","utils/download.js","utils/sort.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeImage","props","getName","employee","firstName","lastName","className","Fragment","alt","src","img","department","role","phoneNumber","Employee","cols","map","col","index","visible","key","toString","formatName","str","replace","c","toUpperCase","capitalize","split","join","decamelize","TableHead","scope","onClick","setSort","getClass","Table","view","data-id","id","onDoubleClick","toastr","success","timeOut","navigator","clipboard","writeText","JSON","stringify","saveEmployee","length","Search","uniqueEntries","Set","i","sort","htmlFor","type","placeholder","list","value","search","onChange","inputChange","entry","ColFilter","style","display","fontWeight","flexWrap","name","defaultChecked","event","modifyColumn","target","checked","download","content","fileName","contentType","a","document","createElement","file","Blob","href","URL","createObjectURL","click","getSortFunc","asc","b","localeCompare","Error","excludeColumns","removeColumns","allColumns","Object","keys","seed","filter","includes","Directory","state","employees","currentId","searchChange","trim","toLowerCase","setState","newState","colName","clickEmployee","currentTarget","getAttribute","parseInt","isVisible","downloadView","this","filtered","background","color","textShadow","top","getCurrentEmployee","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15450ec4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction EmployeeImage(props) {\r\n\r\n  const getName = () => {\r\n    if (props.employee) {\r\n      return `${props.employee.firstName} ${props.employee.lastName}`;\r\n    } else {\r\n      return \"No Employee\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card employee-image-container\">\r\n      {props.employee ?\r\n        <React.Fragment>\r\n          <div className=\"card-image\">\r\n            <img\r\n              alt={getName()}\r\n              className=\"employee-image\"\r\n              src={props.employee.img || \"http://placeholder.pics/svg/300\"}\r\n            />\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <h3>{getName()}</h3>\r\n            <h4>{props.employee.department}</h4>\r\n            <h5>{props.employee.role}</h5>\r\n            <h6>Phone: {props.employee.phoneNumber}</h6>\r\n          </div>\r\n        </React.Fragment> :\r\n        <h5 className=\"p-2\">No Employee Selected</h5>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeImage;","import React from \"react\";\r\n\r\nfunction Employee(props) {\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (props.cols).map((col, index) => (\r\n          props.visible[index] ?\r\n            <td key={col}>{props.employee[col].toString()}</td> :\r\n            null\r\n        ))\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Employee;\r\n","// String Formatting Utilities\r\n\r\n/**\r\n * Capitalize the first letter of each word In string\r\n * @param {String} str\r\n */\r\nconst capitalize = (str) => str.replace(/\\b\\w/g, (c) => c.toUpperCase());\r\n\r\n/**\r\n * Converts camelCase to readable words (ex. phoneNumber => phone Number)\r\n * @param {String} str \r\n */\r\nconst decamelize = (str) => str.split(/(?=[A-Z])/).join(\" \");\r\n\r\n/**\r\n * Convert Camel-Case then Capitalize each word \r\n * ex: phoneNumber => Phone Number\r\n * @param {String} str \r\n * */\r\nconst formatName = (str) => capitalize(decamelize(str));\r\n\r\nexport {\r\n  capitalize,\r\n  decamelize,\r\n  formatName,\r\n}","import React from \"react\";\r\nimport { formatName } from \"../../utils/format\";\r\n\r\n\r\nfunction TableHead(props) {\r\n  return (\r\n    <th\r\n      scope=\"col\"\r\n      onClick={() => props.setSort(props.col)}\r\n      className={props.getClass(props.col)}\r\n    >\r\n      {formatName(props.col)}\r\n    </th>\r\n  );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport Employee from \"../Employee\";\r\nimport \"./table.css\";\r\nimport TableHead from \"../TableHead\";\r\nimport toastr from \"toastr\";\r\nimport \"toastr/build/toastr.css\";\r\nfunction Table(props) {\r\n\r\n  const saveEmployee = (employee) => {\r\n    toastr.success(\"Employee Saved to Clipboard\", \"\", { timeOut: 2000 });\r\n    navigator.clipboard.writeText(JSON.stringify(employee, null, 2));\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-layout\">\r\n      <div className=\"table-container\">\r\n        <table className=\"table table-striped table-hover mb-0\">\r\n          <colgroup>\r\n            {props.cols.map((col, index) => props.visible[index] ?\r\n              <col className={props.getClass(col)} key={col} />\r\n              : null\r\n            )}\r\n          </colgroup>\r\n\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              {props.cols.map((col, index) => props.visible[index] ?\r\n                <TableHead\r\n                  setSort={props.setSort}\r\n                  getClass={props.getClass}\r\n                  col={col}\r\n                  key={col}\r\n                /> : null\r\n              )}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.view.map(employee => (\r\n              <tr\r\n                data-id={employee.id}\r\n                key={employee.id}\r\n                onClick={props.onClick}\r\n                onDoubleClick={() => saveEmployee(employee)}\r\n              >\r\n                <Employee\r\n                  employee={employee}\r\n                  cols={props.cols}\r\n                  visible={props.visible}\r\n                />\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table >\r\n      </div >\r\n      <p className=\"m-1 record-count\">\r\n        Displaying {props.view.length} Employee{props.view.length === 1 ? \"\" : \"s\"}\r\n      </p>\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\nexport default Table;","import React from \"react\";\r\nimport { formatName } from \"../../utils/format\";\r\n\r\nfunction Search(props) {\r\n\r\n  const uniqueEntries = [...new Set(props.view.map(i => i[props.sort]))];\r\n\r\n  return (\r\n    <form className=\"form-inline mb-3 mx-3\">\r\n      <div className=\"form-group\">\r\n        <label className=\"mr-2\" htmlFor=\"search\">Filter by</label>\r\n        {/* Searchbox */}\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"search\"\r\n          id=\"search\"\r\n          placeholder={formatName(props.sort)}\r\n          list=\"employees\"\r\n          value={props.search}\r\n          onChange={props.inputChange}\r\n        />\r\n        {/* auto-complete list */}\r\n        <datalist id=\"employees\">\r\n          {\r\n            uniqueEntries.map(entry => (\r\n              <option value={entry} key={entry} />\r\n            ))\r\n          }\r\n        </datalist>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { formatName } from \"../../utils/format\";\r\n\r\nfunction ColFilter(props) {\r\n  return (\r\n    <form className=\"mb-3 mx-3 fields-form\">\r\n      <span className=\"fields-heading pr-2\" style={{ display: \"inline-block\", fontWeight: \"bold\" }}>Available Fields:</span>\r\n      <div className=\"fields-group\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {\r\n          props.cols.map((col, index) => (\r\n            <div className=\"form-check form-check-inline px-2\" key={col}>\r\n              <input\r\n                id={\"check-\" + col}\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                name={col}\r\n                defaultChecked={props.visible[index]}\r\n                onChange={(event) => props.modifyColumn(index, event.target.checked)}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                type=\"checkbox\"\r\n                name={col}\r\n                htmlFor={\"check-\" + col}\r\n              >\r\n                {formatName(col)}\r\n              </label>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </form >\r\n  );\r\n}\r\n\r\nexport default ColFilter;","export default [\r\n  {\r\n    id: 1,\r\n    firstName: \"Adam\",\r\n    lastName: \"Anderson\",\r\n    role: \"CEO\",\r\n    department: \"Management\",\r\n    phoneNumber: \"555-1212\",\r\n    img: \"/images/01.png\",\r\n  },\r\n  {\r\n    id: 2,\r\n    firstName: \"Bill\",\r\n    lastName: \"Sanders\",\r\n    role: \"Manager\",\r\n    department: \"Human Resources\",\r\n    phoneNumber: \"555-3434\",\r\n    img: \"/images/02.png\",\r\n  },\r\n  {\r\n    id: 3,\r\n    firstName: \"Charlie\",\r\n    lastName: \"Tango\",\r\n    role: \"Software Engineer\",\r\n    department: \"Engineering\",\r\n    phoneNumber: \"555-4545\",\r\n    img: \"/images/03.jpg\",\r\n  },\r\n  {\r\n    id: 4,\r\n    firstName: \"Romeo\",\r\n    lastName: \"Foxtrot\",\r\n    role: \"Test Engineer\",\r\n    department: \"Engineering\",\r\n    phoneNumber: \"555-5656\",\r\n    img: \"/images/04.jpg\",\r\n  },\r\n  {\r\n    id: 5,\r\n    firstName: \"Doug\",\r\n    lastName: \"Peters\",\r\n    role: \"Sales Associate\",\r\n    department: \"Sales\",\r\n    phoneNumber: \"555-6767\",\r\n    img: \"/images/05.jpg\",\r\n  },\r\n  {\r\n    id: 6,\r\n    firstName: \"Donna\",\r\n    lastName: \"Walters\",\r\n    role: \"Accountant\",\r\n    department: \"Accounting\",\r\n    phoneNumber: \"555-7878\",\r\n    img: \"/images/06.jpg\",\r\n  },\r\n  {\r\n    id: 7,\r\n    firstName: \"Kelly\",\r\n    lastName: \"Martinez\",\r\n    role: \"Sales Associate\",\r\n    department: \"Sales\",\r\n    phoneNumber: \"555-8989\",\r\n    img: \"/images/07.png\",\r\n  },\r\n  {\r\n    id: 8,\r\n    firstName: \"Roddy\",\r\n    lastName: \"Rich\",\r\n    role: \"Sales Associate\",\r\n    department: \"Sales\",\r\n    phoneNumber: \"555-9090\",\r\n    img: \"/images/08.png\",\r\n  },\r\n  {\r\n    id: 9,\r\n    firstName: \"Dwight\",\r\n    lastName: \"Kruger\",\r\n    role: \"Janitor\",\r\n    department: \"Maintenance\",\r\n    phoneNumber: \"555-0101\",\r\n    img: \"/images/09.png\",\r\n  },\r\n  {\r\n    id: 10,\r\n    firstName: \"Jim\",\r\n    lastName: \"Zax\",\r\n    role: \"Accountant\",\r\n    department: \"Accounting\",\r\n    phoneNumber: \"555-1234\",\r\n    img: \"/images/10.png\",\r\n  },\r\n  {\r\n    id: 11,\r\n    firstName: \"Anna\",\r\n    lastName: \"Shortt\",\r\n    role: \"Hardware Engineer\",\r\n    department: \"Engineering\",\r\n    phoneNumber: \"555-2345\",\r\n    img: \"/images/11.png\",\r\n  },\r\n  {\r\n    id: 12,\r\n    firstName: \"Chris\",\r\n    lastName: \"Richards\",\r\n    role: \"Electrical Engineer\",\r\n    department: \"Engineering\",\r\n    phoneNumber: \"555-3456\",\r\n    img: \"/images/12.png\",\r\n  },\r\n  {\r\n    id: 13,\r\n    firstName: \"Dante\",\r\n    lastName: \"Jones\",\r\n    role: \"Intern\",\r\n    department: \"Engineering\",\r\n    phoneNumber: \"555-4567\",\r\n    img: \"http://placeholder.pics/svg/300\",\r\n  },\r\n];","function download(content, fileName = 'view.json', contentType = 'text/plain') {\r\n  var a = document.createElement(\"a\");\r\n  var file = new Blob([content], { type: contentType });\r\n  a.href = URL.createObjectURL(file);\r\n  a.download = fileName;\r\n  a.click();\r\n}\r\n\r\nexport default download;\r\n","/**\r\n * Returns a function to sort an array of objects on a given column in a given \r\n * direction. Currently supports strings and numbers.\r\n * @param {String} sort Object Property name to sort on \r\n * @param {Boolean} asc True for sort ascending, False for sort descending\r\n */\r\nconst getSortFunc = (sort, asc) => {\r\n  return (a, b) => {\r\n    switch (typeof a[sort]) {\r\n      // Sort Numeric Properties\r\n      case \"number\":\r\n        return asc ?\r\n          a[sort] - b[sort] :\r\n          b[sort] - a[sort];\r\n\r\n      // Sort String, Boolean Properties\r\n      case \"string\":\r\n        return asc ?\r\n          a[sort].localeCompare(b[sort]) :\r\n          b[sort].localeCompare(a[sort])\r\n\r\n      case \"boolean\":\r\n        return asc ?\r\n          (a[sort] === b[sort] ? 0 : a[sort] ? -1 : 1) :\r\n          (b[sort] ? -1 : 1)\r\n      // Other types not currently supported\r\n      default:\r\n        throw new Error(`Sorting by ${typeof a[sort]} not supported!`);\r\n    }\r\n  }\r\n}\r\n\r\nexport { getSortFunc };\r\n","import React from \"react\";\r\nimport EmployeeImage from \"./EmployeeImage\";\r\nimport Table from \"./Table\";\r\nimport Search from \"./Search\";\r\nimport ColFilter from \"./ColFilter\";\r\nimport seed from \"../utils/seed\";\r\nimport download from \"../utils/download\";\r\nimport { getSortFunc } from \"../utils/sort\";\r\nimport \"./directory.css\";\r\n\r\n// Not Shown by default but will can be enabled\r\nconst excludeColumns = [\"isManager\"];\r\n\r\n// Not shown by default and cannot be shown\r\nconst removeColumns = [\"img\"];\r\n\r\nconst allColumns = Object.keys(seed[0]).filter(col => !removeColumns.includes(col));\r\n\r\nclass Directory extends React.Component {\r\n  state = {\r\n    employees: seed,\r\n    view: seed,\r\n    search: \"\",\r\n    sort: allColumns[0],\r\n    asc: true,\r\n    cols: allColumns,\r\n    visible: allColumns.map((col) => !excludeColumns.includes(col) && !removeColumns.includes(col)),\r\n    currentId: null,\r\n  };\r\n\r\n  searchChange = (event) => {\r\n    // Get search text\r\n    const search = event.target.value.trim();\r\n\r\n    // filter results\r\n    const view = this.state.employees\r\n      .filter(employee => employee[this.state.sort]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(search.toLowerCase()))\r\n\r\n    // re-apply sorting\r\n    view.sort(getSortFunc(this.state.sort, this.state.asc));\r\n\r\n    // Update state\r\n    this.setState({ search: search, view: view })\r\n  };\r\n\r\n  setSort = (sort) => {\r\n    if (!this.state.cols.includes(sort)) throw new Error(\"Unknown Sort!\");\r\n    const newState = {};\r\n    if (this.state.sort === sort) {\r\n      // Toggle The direction if we are already sorted in this direction\r\n      newState.asc = !this.state.asc;\r\n      newState.sort = sort;\r\n      newState.view = [...this.state.view];\r\n    } else {\r\n      // Else update the sort column and default to ascending\r\n      newState.asc = true;\r\n      newState.sort = sort;\r\n      newState.search = \"\";\r\n      newState.view = [...this.state.employees];\r\n    }\r\n    // Apply the sort and direction to our current view\r\n    newState.view.sort(getSortFunc(newState.sort, newState.asc))\r\n    this.setState(newState);\r\n  };\r\n\r\n  getClass = (colName) => {\r\n    // Get Column Class Names to see if column is active and its sort direction\r\n    if (this.state.sort === colName) {\r\n      return this.state.asc ? \"active asc\" : \"active desc\"\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  clickEmployee = (event) => {\r\n    const id = event.currentTarget.getAttribute(\"data-id\");\r\n    if (id) {\r\n      this.setState({ currentId: parseInt(id) });\r\n    }\r\n  }\r\n\r\n  // Return the last employee that was clicked on\r\n  getCurrentEmployee() {\r\n    const id = this.state.currentId;\r\n    const filtered = this.state.employees.filter(employee => employee.id === id);\r\n    if (filtered.length) {\r\n      const employee = filtered[0];\r\n      return employee;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  modifyColumn = (index, isVisible) => {\r\n    if (index < 0 || index >= this.state.cols.length) throw new Error(`modifyColumn: Invalid Column Index! ${index}`);\r\n    const visible = [...this.state.visible];\r\n    visible[index] = isVisible;\r\n    this.setState({ visible })\r\n  }\r\n\r\n  downloadView = () => {\r\n    download(JSON.stringify(this.state.view, null, 2));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mb-5\">\r\n        <div className=\"jumbotron mb-0\" style={{ background: \"linear-gradient(#444, #666, #444)\" }}>\r\n          <h1 style={{ color: \"whitesmoke\", textShadow: \"black 2px -2px\" }}>Employee Directory</h1>\r\n        </div>\r\n        <p></p>\r\n        <div style={{ display: \"sticky\", top: \"2rem\" }}>\r\n          <ColFilter\r\n            cols={this.state.cols}\r\n            visible={this.state.visible}\r\n            modifyColumn={this.modifyColumn}\r\n          />\r\n          <Search\r\n            sort={this.state.sort}\r\n            search={this.state.search}\r\n            view={this.state.view}\r\n            inputChange={this.searchChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-9\">\r\n            <Table\r\n              view={this.state.view}\r\n              getClass={this.getClass}\r\n              setSort={this.setSort}\r\n              cols={this.state.cols}\r\n              visible={this.state.visible}\r\n              onClick={this.clickEmployee}\r\n            />\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={this.downloadView}\r\n            >\r\n              Save View To File\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <EmployeeImage employee={this.getCurrentEmployee()} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;","import React from 'react';\nimport './App.css';\nimport Directory from './components/Directory'\n\nfunction App() {\n  return <Directory />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}